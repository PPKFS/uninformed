module Uninformed.ParseTree where

import Solitude
import Uninformed.Lexer
import Data.Tree
import Optics
import Optics.State.Operators
import Text.Megaparsec
import qualified Data.Set as Set
import Data.Char (isUpper)
import Data.Flags
import Uninformed.Vocab

data NodeType = RootNode | HeadingNode Int | BibliographicNode

data NodeAnnotation = UnparsedSentence deriving stock (Ord, Eq)

data Sentence = Sentence [Lexeme] [Lexeme]
data ParseTreeNode = ParseTreeNode
  { _nodeType :: NodeType
  , _nodeAnnotations :: Set.Set NodeAnnotation
  , _nodeSentence :: Sentence
  }

data ExtensionState = NotExt | BeforeBefore | BeforeEnd | AfterEnd deriving stock (Show, Eq)

data ParseTreeState = ParseTreeState
  { _currentFile :: Text
  , _extensionState :: ExtensionState
  , _insideRule :: Bool
  , _insideTable :: Bool
  , _seenBegin :: Bool
  , _skipLevel :: Maybe Int
  , _currentHeadingLevel :: Maybe Int
  , _sentencesParsed :: Int
  , _lastToken :: Maybe Lexeme
  , _startOfParagraph :: Bool
  , _startOfFile :: Bool
  }

makeLenses ''ParseTreeState

type ParseTree = Tree ParseTreeNode

data SentencePos = SentencePos Int Int deriving stock (Ord, Eq)
data ParseTreeError

type Parser = StateT ParseTreeState (Parsec Void [Lexeme])

-- | see if we're parsing a table
tryEnterTableMode :: Parser ()
tryEnterTableMode = lookAhead (do
    _ <- satisfy (\case
        Lexeme (Word v) _ -> matchWord "table" v
        _ -> False)
    insideTable .= True) <|> pass

matchWord
  :: Text
  -> VocabInfo
  -> Bool
matchWord t (VocabInfo _ (Just x) _) = t == x
matchWord t (VocabInfo r Nothing _) = t == r

matchLexeme :: LexemeType -> Lexeme -> Bool
matchLexeme (Word vl@VocabInfo) (Lexeme (Word vi) _) = matchWord vl vi
matchLexeme lt (Lexeme lt' _) = lt == lt'

matchLexemeWord :: Text -> Lexeme -> Bool
matchLexemeWord t = matchLexeme (Word (VocabInfo t Nothing noFlags))

matchWordsOptions :: [Text] -> [Lexeme] -> Bool
matchWordsOptions ts ls = any (\x -> isPrefixOf' matchLexemeWord (words x) ls) ts

splitCommaSentences
  :: NonEmpty Lexeme
  -> Lexeme
  -> MaybeT Parser [ParseTreeNode]
splitCommaSentences sentence (Lexeme stop _) = do
    whenM (gets _insideRule) fail'
    unless (stop == PunctuationToken Period || stop == PunctuationToken Colon) fail'
    unless (matchWordsOptions
        ["instead of", "every turn", "before", "after", "when" ] (toList sentence) ) fail'
    --first we look for the 'or'; if there's an or
    --then we split on the end of the serial list
    --otherwise, we split from the start
    let splitList = splitOnIntermediateWord "or" sentence
        earliestComma = maybe sentence snd splitList
        commaPos = splitOnIntermediate
    return []

splitOnIntermediate
  :: LexemeType
  -> NonEmpty Lexeme
  -> Maybe ([Lexeme], NonEmpty Lexeme)
splitOnIntermediate t ls = case break (matchLexeme t) (toList ls) of
    (_, []) -> Nothing
    (a, b:bs) -> Just (a, b:|bs)

splitOnIntermediateWord
  :: Text
  -> NonEmpty Lexeme
  -> Maybe ([Lexeme], NonEmpty Lexeme)
splitOnIntermediateWord t = splitOnIntermediate (Word (VocabInfo t Nothing noFlags))
checkForMissingBeginEnd :: Parser ()
checkForMissingBeginEnd = error "not implemented"

checkMeaningCodes :: Lexeme -> MeaningCodes -> Bool
checkMeaningCodes = error "not implemented"



checkForBeginsOrEnds :: [Lexeme] -> Parser ()
checkForBeginsOrEnds l = do
    v <- gets _extensionState
    let extN | matchWordsOptions ["begins", "begins here"] l = Just BeforeEnd
             | matchWordsOptions ["ends", "ends here"] l = Just AfterEnd
             | otherwise = Nothing
    when (extN == Just BeforeEnd && v == BeforeEnd) (fail "Found multiple begins here statements")
    when (extN == Just BeforeEnd && v == AfterEnd) (fail "Found begins here after an ends here statement")
    when (extN == Just AfterEnd && v == BeforeBefore) (fail "Found ends here before begins here statement")
    when (extN == Just AfterEnd && v == AfterEnd) (fail "Found multiple ends here statements")
    whenJust extN (extensionState .=)
    return ()
